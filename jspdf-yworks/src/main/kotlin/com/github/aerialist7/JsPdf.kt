// Generated by Dukat
@file:Suppress(
    "INTERFACE_WITH_SUPERCLASS",
    "OVERRIDING_FINAL_MEMBER",
    "RETURN_TYPE_MISMATCH_ON_OVERRIDE",
    "CONFLICTING_OVERLOADS",
    "EXTERNAL_DELEGATION"
)

package com.github.aerialist7

import org.khronos.webgl.Uint8Array
import org.w3c.dom.HTMLCanvasElement
import org.w3c.dom.HTMLElement
import org.w3c.dom.HTMLImageElement
import org.w3c.dom.url.URL
import kotlin.js.Date
import kotlin.js.Promise

external interface `T$0` {
    var x: Number
    var y: Number
    var w: Number
    var h: Number
}

external interface Annotation {
    var type: dynamic /* 'text' | 'freetext' | 'link' */
        get() = definedExternally
        set(value) = definedExternally
    var title: String?
        get() = definedExternally
        set(value) = definedExternally
    var bounds: `T$0`
    var contents: String
    var open: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var color: String?
        get() = definedExternally
        set(value) = definedExternally
    var name: String?
        get() = definedExternally
        set(value) = definedExternally
    var top: Number?
        get() = definedExternally
        set(value) = definedExternally
    var pageNumber: Number?
        get() = definedExternally
        set(value) = definedExternally
}

external interface TextWithLinkOptions {
    var pageNumber: Number?
        get() = definedExternally
        set(value) = definedExternally
    var magFactor: dynamic /* 'Fit' | 'FitH' | 'FitV' | 'XYZ' */
        get() = definedExternally
        set(value) = definedExternally
    var zoom: Number?
        get() = definedExternally
        set(value) = definedExternally
}

external interface AutoPrintInput {
    var variant: dynamic /* 'non-conform' | 'javascript' */
        get() = definedExternally
        set(value) = definedExternally
}

external interface `T$1`

@Suppress("NOTHING_TO_INLINE")
inline operator fun `T$1`.invoke(doc: Any) {
    asDynamic()(doc)
}

external interface Html2CanvasOptions {
    var async: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var allowTaint: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var backgroundColor: String?
        get() = definedExternally
        set(value) = definedExternally
    var canvas: Any?
        get() = definedExternally
        set(value) = definedExternally
    var foreignObjectRendering: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var ignoreElements: ((element: HTMLElement) -> Boolean)?
        get() = definedExternally
        set(value) = definedExternally
    var imageTimeout: Number?
        get() = definedExternally
        set(value) = definedExternally
    var letterRendering: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var logging: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var onclone: `T$1`?
        get() = definedExternally
        set(value) = definedExternally
    var proxy: String?
        get() = definedExternally
        set(value) = definedExternally
    var removeContainer: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var scale: Number?
        get() = definedExternally
        set(value) = definedExternally
    var svgRendering: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var taintTest: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var useCORS: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var width: Number?
        get() = definedExternally
        set(value) = definedExternally
    var height: Number?
        get() = definedExternally
        set(value) = definedExternally
    var x: Number?
        get() = definedExternally
        set(value) = definedExternally
    var y: Number?
        get() = definedExternally
        set(value) = definedExternally
    var scrollX: Number?
        get() = definedExternally
        set(value) = definedExternally
    var scrollY: Number?
        get() = definedExternally
        set(value) = definedExternally
    var windowWidth: Number?
        get() = definedExternally
        set(value) = definedExternally
    var windowHeight: Number?
        get() = definedExternally
        set(value) = definedExternally
}

external interface HTMLWorkerProgress : Promise<Any> {
    var `val`: Number
    var n: Number
    var ratio: Number
    var state: Any
    var stack: Array<Function<*>>
}

external interface HTMLWorker : Promise<Any> {
    fun from(src: HTMLElement, type: String /* 'container' */): HTMLWorker
    fun from(src: HTMLElement, type: String /* 'canvas' */): HTMLWorker
    fun from(src: HTMLElement, type: String /* 'img' */): HTMLWorker
    fun from(src: HTMLElement, type: String /* 'pdf' */): HTMLWorker
    fun from(src: HTMLElement, type: String /* 'context2d' */): HTMLWorker
    fun from(src: String, type: String /* 'container' */): HTMLWorker
    fun from(src: String, type: String /* 'canvas' */): HTMLWorker
    fun from(src: String, type: String /* 'img' */): HTMLWorker
    fun from(src: String, type: String /* 'pdf' */): HTMLWorker
    fun from(src: String, type: String /* 'context2d' */): HTMLWorker
    var progress: HTMLWorkerProgress
    fun error(msg: String)
    fun save(filename: String)
    fun set(opt: HTMLOptions): HTMLWorker
    fun get(key: String /* 'string' */): HTMLWorker
    fun get(key: String /* 'string' */, cbk: (value: String) -> Unit): String
}

external interface HTMLOptionImage {
    var type: dynamic /* 'jpeg' | 'png' | 'webp' */
        get() = definedExternally
        set(value) = definedExternally
    var quality: Number
}

external interface HTMLOptionPageBreak {
    var mode: dynamic /* 'avoid-all' | 'css' | 'legacy' | Array<dynamic /* 'avoid-all' | 'css' | 'legacy' */> */
        get() = definedExternally
        set(value) = definedExternally
    var before: String?
        get() = definedExternally
        set(value) = definedExternally
    var after: String?
        get() = definedExternally
        set(value) = definedExternally
    var avoid: String?
        get() = definedExternally
        set(value) = definedExternally
}

external interface HTMLOptions {
    var callback: ((doc: jsPDF) -> Unit)?
        get() = definedExternally
        set(value) = definedExternally
    var margin: dynamic /* Number | Array<Number> */
        get() = definedExternally
        set(value) = definedExternally
    var filename: String?
        get() = definedExternally
        set(value) = definedExternally
    var enableLinks: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var pagebreak: HTMLOptionPageBreak?
        get() = definedExternally
        set(value) = definedExternally
    var image: HTMLOptionImage?
        get() = definedExternally
        set(value) = definedExternally
    var html2canvas: Html2CanvasOptions?
        get() = definedExternally
        set(value) = definedExternally
    var jsPDF: jsPDF?
        get() = definedExternally
        set(value) = definedExternally
}

external interface ViewerPreferencesInput {
    var HideToolbar: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var HideMenubar: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var HideWindowUI: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var FitWindow: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var CenterWindow: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var DisplayDocTitle: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var NonFullScreenPageMode: dynamic /* 'UseNone' | 'UseOutlines' | 'UseThumbs' | 'UseOC' */
        get() = definedExternally
        set(value) = definedExternally
    var Direction: dynamic /* 'L2R' | 'R2L' */
        get() = definedExternally
        set(value) = definedExternally
    var ViewArea: dynamic /* 'MediaBox' | 'CropBox' | 'TrimBox' | 'BleedBox' | 'ArtBox' */
        get() = definedExternally
        set(value) = definedExternally
    var ViewClip: dynamic /* 'MediaBox' | 'CropBox' | 'TrimBox' | 'BleedBox' | 'ArtBox' */
        get() = definedExternally
        set(value) = definedExternally
    var PrintArea: dynamic /* 'MediaBox' | 'CropBox' | 'TrimBox' | 'BleedBox' | 'ArtBox' */
        get() = definedExternally
        set(value) = definedExternally
    var PrintClip: dynamic /* 'MediaBox' | 'CropBox' | 'TrimBox' | 'BleedBox' | 'ArtBox' */
        get() = definedExternally
        set(value) = definedExternally
    var PrintScaling: dynamic /* 'AppDefault' | 'None' */
        get() = definedExternally
        set(value) = definedExternally
    var Duplex: dynamic /* 'Simplex' | 'DuplexFlipShortEdge' | 'DuplexFlipLongEdge' | 'none' */
        get() = definedExternally
        set(value) = definedExternally
    var PickTrayByPDFSize: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var PrintPageRange: Array<Array<Number>>?
        get() = definedExternally
        set(value) = definedExternally
    var NumCopies: Number?
        get() = definedExternally
        set(value) = definedExternally
}

external interface Outline {
    fun add(parent: Any, title: String, options: OutlineOptions): OutlineItem
}

external interface OutlineItem {
    var title: String
    var options: Any
    var children: Array<Any>
}

external interface OutlineOptions {
    var pageNumber: Number
}

external interface AcroFormField {
    fun constructor(): AcroFormField
    var showWhenPrinted: Boolean
    var x: Number
    var y: Number
    var width: Number
    var height: Number
    var fieldName: String
    var fontName: String
    var fontStyle: String
    var fontSize: Number
    var maxFontSize: Number
    var color: String
    var defaultValue: String
    var value: String
    var hasAnnotation: Boolean
    var readOnly: Boolean
    var required: Boolean
    var noExport: Boolean
    var textAlign: dynamic /* 'left' | 'center' | 'right' */
        get() = definedExternally
        set(value) = definedExternally
}

external interface AcroFormChoiceField : AcroFormField {
    var topIndex: Number
    fun getOptions(): Array<String>
    fun setOptions(value: Array<String>)
    fun addOption(value: String)
    fun removeOption(value: String, allEntries: Boolean)
    var combo: Boolean
    var edit: Boolean
    var sort: Boolean
    var multiSelect: Boolean
    var doNotSpellCheck: Boolean
    var commitOnSelChange: Boolean
}

external interface AcroFormListBox : AcroFormChoiceField

external interface AcroFormComboBox : AcroFormListBox

external interface AcroFormEditBox : AcroFormComboBox

external interface AcroFormButton : AcroFormField {
    var noToggleToOff: Boolean
    var radio: Boolean
    var pushButton: Boolean
    var radioIsUnison: Boolean
    var caption: String
    var appearanceState: Any
}

external interface AcroFormPushButton : AcroFormButton

external interface AcroFormChildClass : AcroFormField {
    var Parent: Any
    var optionName: String
    var caption: String
    var appearanceState: dynamic /* 'On' | 'Off' */
        get() = definedExternally
        set(value) = definedExternally
}

external interface AcroFormRadioButton : AcroFormButton {
    fun setAppearance(appearance: String)
    fun createOption(name: String): AcroFormChildClass
}

external interface AcroFormCheckBox : AcroFormButton {
    override var appearanceState: dynamic /* 'On' | 'Off' */
        get() = definedExternally
        set(value) = definedExternally
}

external interface AcroFormTextField : AcroFormField {
    var multiline: Boolean
    var fileSelect: Boolean
    var doNotSpellCheck: Boolean
    var doNotScroll: Boolean
    var comb: Boolean
    var richText: Boolean
    var maxLength: Number
    var hasAppearanceStream: Boolean
}

external interface AcroFormPasswordField : AcroFormTextField

external interface Gradient {
    fun addColorStop(position: Number, color: String)
    fun getColor(): String
}

external interface Context2d {
    var autoPaging: Boolean
    var fillStyle: dynamic /* String | Gradient */
        get() = definedExternally
        set(value) = definedExternally
    var filter: String
    var font: String
    var globalAlpha: Number
    var globalCompositeOperation: String /* 'source-over' */
    var imageSmoothingEnabled: Boolean
    var imageSmoothingQuality: dynamic /* 'low' | 'high' */
        get() = definedExternally
        set(value) = definedExternally
    var ignoreClearRect: Boolean
    var lastBreak: Number
    var lineCap: dynamic /* 'butt' | 'round' | 'square' */
        get() = definedExternally
        set(value) = definedExternally
    var lineDashOffset: Number
    var lineJoin: dynamic /* 'bevel' | 'round' | 'miter' */
        get() = definedExternally
        set(value) = definedExternally
    var lineWidth: Number
    var miterLimit: Number
    var pageBreaks: Array<Number>
    var pageWrapXEnabled: Boolean
    var pageWrapYEnabled: Boolean
    var posX: Number
    var posY: Number
    var shadowBlur: Number
    var shadowColor: String
    var shadowOffsetX: Number
    var shadowOffsetY: Number
    var strokeStyle: dynamic /* String | Gradient */
        get() = definedExternally
        set(value) = definedExternally
    var textAlign: dynamic /* 'right' | 'end' | 'center' | 'left' | 'start' */
        get() = definedExternally
        set(value) = definedExternally
    var textBaseline: dynamic /* 'alphabetic' | 'bottom' | 'top' | 'hanging' | 'middle' | 'ideographic' */
        get() = definedExternally
        set(value) = definedExternally

    fun arc(x: Number, y: Number, radius: Number, startAngle: Number, endAngle: Number, counterclockwise: Boolean)
    fun arcTo(x1: Number, y1: Number, x2: Number, y2: Number, radius: Number)
    fun beginPath()
    fun bezierCurveTo(cp1x: Number, cp1y: Number, cp2x: Number, cp2y: Number, x: Number, y: Number)
    fun clearRect(x: Number, y: Number, w: Number, h: Number)
    fun clip(): jsPDF
    fun clipEvenOdd(): jsPDF
    fun closePath()
    fun createLinearGradient(x0: Number, y0: Number, x1: Number, y1: Number): Gradient
    fun createPattern(): Gradient
    fun createRadialGradient(): Gradient
    fun drawImage(img: String, x: Number, y: Number, width: Number, height: Number)
    fun drawImage(
        img: String,
        sx: Number,
        sy: Number,
        swidth: Number,
        sheight: Number,
        x: Number,
        y: Number,
        width: Number,
        height: Number
    )

    fun fill()
    fun fillRect(x: Number, y: Number, w: Number, h: Number)
    fun fillText(text: String, x: Number, y: Number, maxWidth: Number? = definedExternally)
    fun lineTo(x: Number, y: Number)
    fun measureText(text: String): Number
    fun moveTo(x: Number, y: Number)
    fun quadraticCurveTo(cpx: Number, cpy: Number, x: Number, y: Number)
    fun rect(x: Number, y: Number, w: Number, h: Number)
    fun restore()
    fun rotate(angle: Number)
    fun save()
    fun scale(scalewidth: Number, scaleheight: Number)
    fun setTransform(a: Number, b: Number, c: Number, d: Number, e: Number, f: Number)
    fun stroke()
    fun strokeRect(x: Number, y: Number, w: Number, h: Number)
    fun strokeText(text: String, x: Number, y: Number, maxWidth: Number? = definedExternally)
    fun transform(a: Number, b: Number, c: Number, d: Number, e: Number, f: Number)
    fun translate(x: Number, y: Number)
}

external enum class ImageCompression {
    NONE,
    FAST,
    MEDIUM,
    SLOW
}

external enum class ColorSpace {
    DeviceRGB,
    DeviceGray,
    DeviceCMYK,
    CalGray,
    CalRGB,
    Lab,
    ICCBased,
    Indexed,
    Pattern,
    Separation,
    DeviceN
}

external interface ImageOptions {
    var imageData: dynamic /* String | HTMLImageElement | HTMLCanvasElement | Uint8Array */
        get() = definedExternally
        set(value) = definedExternally
    var x: Number
    var y: Number
    var width: Number
    var height: Number
    var alias: String?
        get() = definedExternally
        set(value) = definedExternally
    var compression: ImageCompression?
        get() = definedExternally
        set(value) = definedExternally
    var rotation: Number?
        get() = definedExternally
        set(value) = definedExternally
}

external interface ImageProperties {
    var alias: Number
    var width: Number
    var height: Number
    var colorSpace: ColorSpace
    var bitsPerComponent: Number
    var filter: String
    var decodeParameters: String?
        get() = definedExternally
        set(value) = definedExternally
    var transparency: Any?
        get() = definedExternally
        set(value) = definedExternally
    var palette: Any?
        get() = definedExternally
        set(value) = definedExternally
    var sMask: Any?
        get() = definedExternally
        set(value) = definedExternally
    var predictor: Number?
        get() = definedExternally
        set(value) = definedExternally
    var index: Number
    var data: String
}

external interface `T$2` {
    var noBOM: Boolean
    var autoencode: Boolean
}

external interface TextOptionsLight {
    var align: dynamic /* 'left' | 'center' | 'right' | 'justify' */
        get() = definedExternally
        set(value) = definedExternally
    var angle: Number?
        get() = definedExternally
        set(value) = definedExternally
    var baseline: dynamic /* 'alphabetic' | 'ideographic' | 'bottom' | 'top' | 'middle' | 'hanging' */
        get() = definedExternally
        set(value) = definedExternally
    var flags: `T$2`
    var rotationDirection: dynamic /* 0 | 1 */
        get() = definedExternally
        set(value) = definedExternally
    var charSpace: Number?
        get() = definedExternally
        set(value) = definedExternally
    var lineHeightFactor: Number?
        get() = definedExternally
        set(value) = definedExternally
    var maxWidth: Number?
        get() = definedExternally
        set(value) = definedExternally
    var renderingMode: dynamic /* 'fill' | 'stroke' | 'fillThenStroke' | 'invisible' | 'fillAndAddForClipping' | 'strokeAndAddPathForClipping' | 'fillThenStrokeAndAddToPathForClipping' | 'addToPathForClipping' */
        get() = definedExternally
        set(value) = definedExternally
    var isInputVisual: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var isOutputVisual: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var isInputRtl: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var isOutputRtl: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var isSymmetricSwapping: Boolean?
        get() = definedExternally
        set(value) = definedExternally
}

external interface TextOptions : TextOptionsLight {
    var text: dynamic /* String | Array<String> */
        get() = definedExternally
        set(value) = definedExternally
    var x: Number
    var y: Number
}

external interface CellConfig {
    var name: String
    var prompt: String
    var align: dynamic /* 'left' | 'center' | 'right' */
        get() = definedExternally
        set(value) = definedExternally
    var padding: Number
    var width: Number
}

external interface jsPDFOptions {
    var orientation: dynamic /* 'p' | 'portrait' | 'l' | 'landscape' */
        get() = definedExternally
        set(value) = definedExternally
    var unit: dynamic /* 'pt' | 'px' | 'in' | 'mm' | 'cm' | 'ex' | 'em' | 'pc' */
        get() = definedExternally
        set(value) = definedExternally
    var format: dynamic /* String | Array<Number> */
        get() = definedExternally
        set(value) = definedExternally
    var compress: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var precision: Number?
        get() = definedExternally
        set(value) = definedExternally
    var filters: Array<String>?
        get() = definedExternally
        set(value) = definedExternally
    var userUnit: Number?
        get() = definedExternally
        set(value) = definedExternally
}

external interface Point {
    var x: Number
    var y: Number
}

external interface Rectangle : Point {
    var w: Number
    var h: Number
}

external interface `T$3` {
    var scale: Matrix
    var translate: Matrix
    var rotate: Matrix
    var skew: Matrix
}

external interface Matrix {
    var sx: Number
    var shy: Number
    var shx: Number
    var sy: Number
    var tx: Number
    var ty: Number
    fun join(separator: String? = definedExternally): String
    fun multiply(matrix: Matrix): Matrix
    fun decompose(): `T$3`
    override fun toString(): String
    fun inversed(): String
    fun applyToPoint(point: Point): Point
    fun applyToRectangle(rect: Rectangle): Rectangle
    fun clone(): Matrix
}

external interface PageInfo {
    var objId: Number
    var pageNumber: Number
    var pageContext: Any
}

external interface Font {
    var id: Number
    var encoding: String
    var fontName: String
    var fontStyle: String
    var isStandardFont: Boolean
    var metadata: Any
    var objectNumber: Number
    var postScriptName: String
}

external interface DocumentProperties {
    var title: String?
        get() = definedExternally
        set(value) = definedExternally
    var subject: String?
        get() = definedExternally
        set(value) = definedExternally
    var author: String?
        get() = definedExternally
        set(value) = definedExternally
    var keywords: String?
        get() = definedExternally
        set(value) = definedExternally
    var creator: String?
        get() = definedExternally
        set(value) = definedExternally
}

external interface `T$4` {
    var filename: String?
        get() = definedExternally
        set(value) = definedExternally
}

external interface `T$5` {
    var returnPromise: Boolean?
        get() = definedExternally
        set(value) = definedExternally
}

external interface `T$6` {
    var width: Number
    var getWidth: () -> Number
    var height: Number
    var getHeight: () -> Number
}

external interface `T$7` {
    var `scaleFactor`: Number
    var `pageSize`: `T$6`
    var `pages`: Array<Number>
}

external interface `T$8` {
    fun ChoiceField(): AcroFormChoiceField
    fun ListBox(): AcroFormListBox
    fun ComboBox(): AcroFormComboBox
    fun EditBox(): AcroFormEditBox
    fun Button(): AcroFormButton
    fun PushButton(): AcroFormPushButton
    fun RadioButton(): AcroFormRadioButton
    fun CheckBox(): AcroFormCheckBox
    fun TextField(): AcroFormTextField
    fun PasswordField(): AcroFormPasswordField
    fun Appearance(): Any
}

external interface `T$9` {
    var pdf: jsPDF
    var width: Number
    var height: Number
    fun getContext(type: String? = definedExternally): Context2d
    var style: Any
}

external interface `T$10` {
    var x: Number
    var y: Number
}

@JsModule("jspdf-yworks")
open external class jsPDF(options: jsPDFOptions? = definedExternally) {
    constructor(orientation: String, unit: dynamic, format: dynamic, compressPdf: Boolean?)

    open var CapJoinStyles: Any
    open var version: String
    open fun addFont(
        postScriptName: String,
        id: String,
        fontStyle: String,
        encoding: String /* 'StandardEncoding' */,
        isStandardFont: Boolean? = definedExternally
    ): String

    open fun addFont(
        postScriptName: String,
        id: String,
        fontStyle: String,
        encoding: String /* 'MacRomanEncoding' */,
        isStandardFont: Boolean? = definedExternally
    ): String

    open fun addFont(
        postScriptName: String,
        id: String,
        fontStyle: String,
        encoding: String /* 'Identity-H' */,
        isStandardFont: Boolean? = definedExternally
    ): String

    open fun addFont(
        postScriptName: String,
        id: String,
        fontStyle: String,
        encoding: String /* 'WinAnsiEncoding' */,
        isStandardFont: Boolean? = definedExternally
    ): String

    open fun addFont(url: URL, id: String, fontStyle: String, encoding: String /* 'StandardEncoding' */): String
    open fun addFont(url: URL, id: String, fontStyle: String, encoding: String /* 'MacRomanEncoding' */): String
    open fun addFont(url: URL, id: String, fontStyle: String, encoding: String /* 'Identity-H' */): String
    open fun addFont(url: URL, id: String, fontStyle: String, encoding: String /* 'WinAnsiEncoding' */): String
    open fun addGState(key: Any, gState: Any): jsPDF
    open fun addPage(format: String? = definedExternally, orientation: String /* 'p' */ = definedExternally): jsPDF
    open fun addPage(
        format: String? = definedExternally,
        orientation: String /* 'portrait' */ = definedExternally
    ): jsPDF

    open fun addPage(format: String? = definedExternally, orientation: String /* 'l' */ = definedExternally): jsPDF
    open fun addPage(
        format: String? = definedExternally,
        orientation: String /* 'landscape' */ = definedExternally
    ): jsPDF

    open fun addPage(
        format: Array<Number>? = definedExternally,
        orientation: String /* 'p' */ = definedExternally
    ): jsPDF

    open fun addPage(
        format: Array<Number>? = definedExternally,
        orientation: String /* 'portrait' */ = definedExternally
    ): jsPDF

    open fun addPage(
        format: Array<Number>? = definedExternally,
        orientation: String /* 'l' */ = definedExternally
    ): jsPDF

    open fun addPage(
        format: Array<Number>? = definedExternally,
        orientation: String /* 'landscape' */ = definedExternally
    ): jsPDF

    open fun beginFormObject(x: Number, y: Number, width: Number, height: Number, matrix: Any): jsPDF
    open fun circle(x: Number, y: Number, r: Number, style: String): jsPDF
    open fun clip(rule: String /* 'evenodd' */ = definedExternally): jsPDF
    open fun discardPath(): jsPDF
    open fun deletePage(targetPage: Number): jsPDF
    open fun doFormObject(key: Any, matrix: Any): jsPDF
    open fun ellipse(x: Number, y: Number, rx: Number, ry: Number, style: String? = definedExternally): jsPDF
    open fun endFormObject(key: Any): jsPDF
    open fun f2(number: Number): String
    open fun f3(number: Number): String
    open fun getCharSpace(): Number
    open fun getCreationDate(type: String): Date
    open fun getCurrentPageInfo(): PageInfo
    open fun getFileId(): String
    open fun getFillColor(): String
    open fun getFont(): Font
    open fun getFontList(): Array<Any>
    open fun getFontSize(): Number
    open fun getFormObject(key: Any): Any
    open fun getLineHeight(): Number
    open fun getLineHeightFactor(): Number
    open fun getNumberOfPages(): Number
    open fun getPageInfo(pageNumberOneBased: Number): PageInfo
    open fun getR2L(): Boolean
    open fun getStyle(style: String): String
    open fun getTextColor(): String
    open fun insertPage(beforePage: Number): jsPDF
    open fun line(x1: Number, y1: Number, x2: Number, y2: Number): jsPDF
    open fun lines(
        lines: Array<Any>,
        x: Any,
        y: Any,
        scale: Any? = definedExternally,
        style: String? = definedExternally,
        closed: Boolean? = definedExternally
    ): jsPDF

    open fun movePage(targetPage: Number, beforePage: Number): jsPDF
    open fun output(): String

    //    open fun output(type: String /* 'arraybuffer' */): ArrayBuffer
//    open fun output(type: String /* 'blob' */): Blob
//    open fun output(type: String /* 'bloburi' */): URL
//    open fun output(type: String /* 'bloburl' */): URL
    open fun output(type: String /* 'datauristring' */, options: `T$4` = definedExternally): String

    //    open fun output(type: String /* 'dataurlstring' */, options: `T$4` = definedExternally): String
//    open fun output(type: String /* 'pdfobjectnewwindow' */): Window
//    open fun output(type: String /* 'pdfjsnewwindow' */): Window
//    open fun output(type: String /* 'dataurlnewwindow' */): Window
//    open fun output(type: String /* 'dataurl' */, options: `T$4` = definedExternally): Boolean
//    open fun output(type: String /* 'datauri' */, options: `T$4` = definedExternally): Boolean
    open fun pdfEscape(text: String, flags: Any): String
    open fun path(
        lines: Array<Any>? = definedExternally,
        style: String? = definedExternally,
        patternKey: String? = definedExternally,
        patternData: Any? = definedExternally
    ): jsPDF

    open fun rect(x: Number, y: Number, w: Number, h: Number, style: String? = definedExternally): jsPDF
    open fun restoreGraphicsState(): jsPDF
    open fun roundedRect(x: Number, y: Number, w: Number, h: Number, rx: Number, ry: Number, style: String): jsPDF
    open fun save(filename: String? = definedExternally, options: `T$5` = definedExternally): jsPDF
    open fun saveGraphicsState(): jsPDF
    open fun setCharSpace(charSpace: Number): jsPDF
    open fun setCreationDate(date: Date? = definedExternally): jsPDF
    open fun setCreationDate(date: String? = definedExternally): jsPDF
    open fun setCurrentTransformationMatrix(matrix: Any): jsPDF
    open fun setDisplayMode(
        zoom: Number,
        layout: dynamic /* 'continuous' | 'single' | 'twoleft' | 'tworight' | 'two' */ = definedExternally,
        pmode: dynamic /* 'UseOutlines' | 'UseThumbs' | 'FullScreen' */ = definedExternally
    ): jsPDF

    open fun setDisplayMode(
        zoom: String /* 'fullheight' */,
        layout: dynamic /* 'continuous' | 'single' | 'twoleft' | 'tworight' | 'two' */ = definedExternally,
        pmode: dynamic /* 'UseOutlines' | 'UseThumbs' | 'FullScreen' */ = definedExternally
    ): jsPDF

    open fun setDisplayMode(
        zoom: String /* 'fullwidth' */,
        layout: dynamic /* 'continuous' | 'single' | 'twoleft' | 'tworight' | 'two' */ = definedExternally,
        pmode: dynamic /* 'UseOutlines' | 'UseThumbs' | 'FullScreen' */ = definedExternally
    ): jsPDF

    open fun setDisplayMode(
        zoom: String /* 'fullpage' */,
        layout: dynamic /* 'continuous' | 'single' | 'twoleft' | 'tworight' | 'two' */ = definedExternally,
        pmode: dynamic /* 'UseOutlines' | 'UseThumbs' | 'FullScreen' */ = definedExternally
    ): jsPDF

    open fun setDisplayMode(
        zoom: String /* 'original' */,
        layout: dynamic /* 'continuous' | 'single' | 'twoleft' | 'tworight' | 'two' */ = definedExternally,
        pmode: dynamic /* 'UseOutlines' | 'UseThumbs' | 'FullScreen' */ = definedExternally
    ): jsPDF

    open fun setDisplayMode(
        zoom: String,
        layout: dynamic /* 'continuous' | 'single' | 'twoleft' | 'tworight' | 'two' */ = definedExternally,
        pmode: dynamic /* 'UseOutlines' | 'UseThumbs' | 'FullScreen' */ = definedExternally
    ): jsPDF

    open fun setDocumentProperties(properties: DocumentProperties): jsPDF
    open fun setProperties(properties: DocumentProperties): jsPDF
    open fun setDrawColor(ch1: String): jsPDF
    open fun setDrawColor(ch1: Number): jsPDF
    open fun setDrawColor(ch1: Number, ch2: Number, ch3: Number, ch4: Number? = definedExternally): jsPDF
    open fun setFileId(value: String): jsPDF
    open fun setFillColor(ch1: String): jsPDF
    open fun setFillColor(ch1: Number, ch2: Number, ch3: Number, ch4: Number? = definedExternally): jsPDF
    open fun setFont(fontName: String, fontStyle: String? = definedExternally): jsPDF
    open fun setFontType(fontStyle: String): jsPDF
    open fun setFontStyle(fontStyle: String): jsPDF
    open fun setFontSize(size: Number): jsPDF
    open fun setGState(gState: Any): jsPDF
    open fun setLineCap(style: String): jsPDF
    open fun setLineCap(style: Number): jsPDF
    open fun setLineDashPattern(dashArray: Array<Number>, dashPhase: Number): jsPDF
    open fun setLineHeightFactor(value: Number): jsPDF
    open fun setLineJoin(style: String): jsPDF
    open fun setLineJoin(style: Number): jsPDF
    open fun setLineMiterLimit(length: Number): jsPDF
    open fun setLineWidth(width: Number): jsPDF
    open fun setPage(pageNumber: Number): jsPDF
    open fun setR2L(value: Boolean): jsPDF
    open fun setTextColor(ch1: String): jsPDF
    open fun setTextColor(ch1: Number): jsPDF
    open fun setTextColor(ch1: Number, ch2: Number, ch3: Number, ch4: Number? = definedExternally): jsPDF
    open fun text(
        text: String,
        x: Number,
        y: Number,
        options: TextOptionsLight? = definedExternally,
        transform: Number? = definedExternally
    ): jsPDF

    open fun text(
        text: String,
        x: Number,
        y: Number,
        options: TextOptionsLight? = definedExternally,
        transform: Any? = definedExternally
    ): jsPDF

    open fun text(
        text: Array<String>,
        x: Number,
        y: Number,
        options: TextOptionsLight? = definedExternally,
        transform: Number? = definedExternally
    ): jsPDF

    open fun text(
        text: Array<String>,
        x: Number,
        y: Number,
        options: TextOptionsLight? = definedExternally,
        transform: Any? = definedExternally
    ): jsPDF

    open fun triangle(x1: Number, y1: Number, x2: Number, y2: Number, x3: Number, y3: Number, style: String): jsPDF
    open fun getHorizontalCoordinateString(value: Number): Number
    open fun getVerticalCoordinateString(value: Number): Number
    open var internal: `T$7`
    open fun addHTML(element: Any, x: Number, y: Number, options: Any, callback: Function<*>): jsPDF
    open fun addHTML(element: Any, callback: Function<*>): jsPDF
    open fun addImage(
        imageData: String,
        format: String,
        x: Number,
        y: Number,
        w: Number,
        h: Number,
        alias: String? = definedExternally,
        compression: ImageCompression? = definedExternally,
        rotation: Number? = definedExternally
    ): jsPDF

    open fun addImage(
        imageData: HTMLImageElement,
        format: String,
        x: Number,
        y: Number,
        w: Number,
        h: Number,
        alias: String? = definedExternally,
        compression: ImageCompression? = definedExternally,
        rotation: Number? = definedExternally
    ): jsPDF

    open fun addImage(
        imageData: HTMLCanvasElement,
        format: String,
        x: Number,
        y: Number,
        w: Number,
        h: Number,
        alias: String? = definedExternally,
        compression: ImageCompression? = definedExternally,
        rotation: Number? = definedExternally
    ): jsPDF

    open fun addImage(
        imageData: Uint8Array,
        format: String,
        x: Number,
        y: Number,
        w: Number,
        h: Number,
        alias: String? = definedExternally,
        compression: ImageCompression? = definedExternally,
        rotation: Number? = definedExternally
    ): jsPDF

    open fun addImage(
        imageData: String,
        x: Number,
        y: Number,
        w: Number,
        h: Number,
        alias: String? = definedExternally,
        compression: ImageCompression? = definedExternally,
        rotation: Number? = definedExternally
    ): jsPDF

    open fun addImage(
        imageData: HTMLImageElement,
        x: Number,
        y: Number,
        w: Number,
        h: Number,
        alias: String? = definedExternally,
        compression: ImageCompression? = definedExternally,
        rotation: Number? = definedExternally
    ): jsPDF

    open fun addImage(
        imageData: HTMLCanvasElement,
        x: Number,
        y: Number,
        w: Number,
        h: Number,
        alias: String? = definedExternally,
        compression: ImageCompression? = definedExternally,
        rotation: Number? = definedExternally
    ): jsPDF

    open fun addImage(
        imageData: Uint8Array,
        x: Number,
        y: Number,
        w: Number,
        h: Number,
        alias: String? = definedExternally,
        compression: ImageCompression? = definedExternally,
        rotation: Number? = definedExternally
    ): jsPDF

    open fun addImage(options: ImageOptions): jsPDF
    open fun getImageProperties(imageData: String): ImageProperties
    open fun getImageProperties(imageData: HTMLImageElement): ImageProperties
    open fun getImageProperties(imageData: HTMLCanvasElement): ImageProperties
    open fun getImageProperties(imageData: Uint8Array): ImageProperties
    open fun processArabic(text: String): String
    open fun createAnnotation(options: Annotation)
    open fun link(x: Number, y: Number, w: Number, h: Number, options: Any)
    open fun textWithLink(text: String, x: Number, y: Number, options: Any): Number
    open fun getTextWidth(text: String): Number
    open fun autoPrint(options: AutoPrintInput? = definedExternally): jsPDF
    open fun addField(field: AcroFormField): jsPDF
    open fun addButton(button: AcroFormButton): jsPDF
    open fun addTextField(textField: AcroFormTextField): jsPDF
    open fun addChoiceField(choiceField: AcroFormChoiceField): jsPDF
    open var AcroForm: `T$8`
    open var canvas: `T$9`
    open fun setHeaderFunction(func: (jsPDFInstance: jsPDF, pages: Number) -> Array<Number>): jsPDF
    open fun getTextDimensions(txt: String, options: Any? = definedExternally): `T$10`
    open fun cellAddPage(): jsPDF
    open fun cell(x: Number, y: Number, w: Number, h: Number, txt: String, ln: Number, align: String): jsPDF
    open fun table(x: Number, y: Number, data: Any, headers: Array<String>, config: Any): jsPDF
    open fun calculateLineHeight(headerNames: Array<String>, columnWidths: Array<Number>, model: Array<Any>): Number
    open fun setTableHeaderRow(config: Array<CellConfig>)
    open fun printHeaderRow(lineNumber: Number, new_page: Boolean? = definedExternally)
    open var context2d: Context2d
    open var outline: Outline
    open fun loadFile(url: String, sync: String /* true */ = definedExternally): String
    open fun loadFile(url: String, sync: String /* false */, callback: (data: String) -> String)
    open fun html(src: String, options: HTMLOptions? = definedExternally): Promise<HTMLWorker>
    open fun html(src: HTMLElement, options: HTMLOptions? = definedExternally): Promise<HTMLWorker>
    open fun fromHTML(
        HTML: String,
        x: Number,
        y: Number,
        settings: Any? = definedExternally,
        callback: Function<*>? = definedExternally,
        margins: Any? = definedExternally
    ): jsPDF

    open fun fromHTML(
        HTML: HTMLElement,
        x: Number,
        y: Number,
        settings: Any? = definedExternally,
        callback: Function<*>? = definedExternally,
        margins: Any? = definedExternally
    ): jsPDF

    open fun addJS(javascript: String): jsPDF
    open fun getCharWidthsArray(text: String, options: Any? = definedExternally): Array<Any>
    open fun getStringUnitWidth(text: String, options: Any? = definedExternally): Number
    open fun splitTextToSize(text: String, maxlen: Number, options: Any? = definedExternally): Any
    open fun addSVG(
        svgtext: String,
        x: Number,
        y: Number,
        w: Number? = definedExternally,
        h: Number? = definedExternally
    ): jsPDF

    open fun addSvgAsImage(
        svg: String,
        x: Number,
        y: Number,
        w: Number,
        h: Number,
        alias: String? = definedExternally,
        compression: Boolean? = definedExternally,
        rotation: Number? = definedExternally
    ): jsPDF

    open fun setLanguage(langCode: dynamic /* 'af' | 'sq' | 'ar' | 'ar-DZ' | 'ar-BH' | 'ar-EG' | 'ar-IQ' | 'ar-JO' | 'ar-KW' | 'ar-LB' | 'ar-LY' | 'ar-MA' | 'ar-OM' | 'ar-QA' | 'ar-SA' | 'ar-SY' | 'ar-TN' | 'ar-AE' | 'ar-YE' | 'an' | 'hy' | 'as' | 'ast' | 'az' | 'eu' | 'be' | 'bn' | 'bs' | 'br' | 'bg' | 'my' | 'ca' | 'ch' | 'ce' | 'zh' | 'zh-HK' | 'zh-CN' | 'zh-SG' | 'zh-TW' | 'cv' | 'co' | 'cr' | 'hr' | 'cs' | 'da' | 'nl' | 'nl-BE' | 'en' | 'en-AU' | 'en-BZ' | 'en-CA' | 'en-IE' | 'en-JM' | 'en-NZ' | 'en-PH' | 'en-ZA' | 'en-TT' | 'en-GB' | 'en-US' | 'en-ZW' | 'eo' | 'et' | 'fo' | 'fj' | 'fi' | 'fr' | 'fr-BE' | 'fr-CA' | 'fr-FR' | 'fr-LU' | 'fr-MC' | 'fr-CH' | 'fy' | 'fur' | 'gd' | 'gd-IE' | 'gl' | 'ka' | 'de' | 'de-AT' | 'de-DE' | 'de-LI' | 'de-LU' | 'de-CH' | 'el' | 'gu' | 'ht' | 'he' | 'hi' | 'hu' | 'is' | 'id' | 'iu' | 'ga' | 'it' | 'it-CH' | 'ja' | 'kn' | 'ks' | 'kk' | 'km' | 'ky' | 'tlh' | 'ko' | 'ko-KP' | 'ko-KR' | 'la' | 'lv' | 'lt' | 'lb' | 'mk' | 'ms' | 'ml' | 'mt' | 'mi' | 'mr' | 'mo' | 'nv' | 'ng' | 'ne' | 'no' | 'nb' | 'nn' | 'oc' | 'or' | 'om' | 'fa' | 'fa-IR' | 'pl' | 'pt' | 'pt-BR' | 'pa' | 'pa-IN' | 'pa-PK' | 'qu' | 'rm' | 'ro' | 'ro-MO' | 'ru' | 'ru-MO' | 'sz' | 'sg' | 'sa' | 'sc' | 'sd' | 'si' | 'sr' | 'sk' | 'sl' | 'so' | 'sb' | 'es' | 'es-AR' | 'es-BO' | 'es-CL' | 'es-CO' | 'es-CR' | 'es-DO' | 'es-EC' | 'es-SV' | 'es-GT' | 'es-HN' | 'es-MX' | 'es-NI' | 'es-PA' | 'es-PY' | 'es-PE' | 'es-PR' | 'es-ES' | 'es-UY' | 'es-VE' | 'sx' | 'sw' | 'sv' | 'sv-FI' | 'sv-SV' | 'ta' | 'tt' | 'te' | 'th' | 'tig' | 'ts' | 'tn' | 'tr' | 'tk' | 'uk' | 'hsb' | 'ur' | 've' | 'vi' | 'vo' | 'wa' | 'cy' | 'xh' | 'ji' | 'zu' */): jsPDF

    open fun putTotalPages(pageExpression: String): jsPDF
    open fun viewerPreferences(options: ViewerPreferencesInput, doReset: Boolean? = definedExternally): jsPDF
    open fun viewerPreferences(arg: String /* 'reset' */): jsPDF
    open fun existsFileInVFS(filename: String): Boolean
    open fun addFileToVFS(filename: String, filecontent: String): jsPDF
    open fun getFileFromVFS(filename: String): String
    open fun addMetadata(metadata: String, namespaceuri: String? = definedExternally): jsPDF
    open fun addPage(): jsPDF
    open fun setCreationDate(): jsPDF
    open fun text(text: String, x: Number, y: Number): jsPDF
    open fun text(text: Array<String>, x: Number, y: Number): jsPDF
}